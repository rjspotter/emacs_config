This is Indium.info, produced by makeinfo version 6.1 from Indium.texi.

     Indium 1.2.0, Feb 28, 2018

     Nicolas Petton

     Copyright © 2018, Nicolas Petton

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Indium: (Indium.info). JavaScript development environment for Emacs.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.6.6.


File: Indium.info,  Node: Top,  Next: Table of contents,  Up: (dir)

Indium Documentation
********************

     Indium 1.2.0, Feb 28, 2018

     Nicolas Petton

     Copyright © 2018, Nicolas Petton

Indium is a JavaScript development environment for Emacs(1).

Indium is Free Software, licensed under the GPL v3.0.  You can follow
its development on GitHub(2).

Indium connects to a browser tab or nodejs process and provides several
features for JavaScript development, including:

   * a REPL (with auto completion) & object inspection;

   * an inspector, with history and navigation;

   * a scratch buffer (‘M-x indium-scratch’);

   * JavaScript evaluation in JS buffers with ‘indium-interaction-mode’;

   * a stepping Debugger, similar to ‘edebug’, or ‘cider’.

This documentation can be read online at
‘https://indium.readthedocs.io’.

It is also available in Info format and can be consulted from within
Emacs with ‘C-h i m indium RET’.

* Menu:

* Table of contents:: 
* Indices and tables:: 

 — The Detailed Node Listing —

Table of contents

* Installation:: 
* Getting up and running:: 
* The REPL:: 
* Interaction in JS buffers:: 
* The stepping debugger:: 
* The inspector:: 
* Network:: 
* Listing parsed scripts:: 

Installation

* Using MELPA:: 
* Manual installation:: 

Getting up and running

* NodeJS:: 
* Chrome/Chromium:: 
* Using local files when debugging:: 
* Configuring Webpack for the debugger:: 

NodeJS

* Installing a recent version of NodeJS:: 
* Executing NodeJS from Emacs:: 
* Connecting to a Nodejs process:: 

The REPL

* Starting a REPL:: 
* Using the REPL:: 
* Code evaluation & context:: 

Using the REPL

* Keybindings:: 
* Reconnecting from the REPL buffer:: 

Interaction in JS buffers

* Evaluating and inspecting:: 
* Switching to the REPL buffer:: 
* Adding and removing breakpoints:: 
* Live code update (hot-swapping JavaScript sources): Live code update hot-swapping JavaScript sources. 

The stepping debugger

* Using sourcemaps:: 
* Blackboxing scripts:: 
* Sourcemaps and Webpack:: 

The inspector

* Using the inspector:: 

Listing parsed scripts

* Using the listing buffer:: 


   ---------- Footnotes ----------

   (1) http://gnu.org/software/emacs

   (2) https://github.com/NicolasPetton/indium


File: Indium.info,  Node: Table of contents,  Next: Indices and tables,  Prev: Top,  Up: Top

1 Table of contents
*******************

* Menu:

* Installation:: 
* Getting up and running:: 
* The REPL:: 
* Interaction in JS buffers:: 
* The stepping debugger:: 
* The inspector:: 
* Network:: 
* Listing parsed scripts:: 


File: Indium.info,  Node: Installation,  Next: Getting up and running,  Up: Table of contents

1.1 Installation
================

     Note: If you already have installed ‘Jade’, you should read the
     migration-from-jade page first.

Indium supports ‘Emacs 25.1+’, ‘Chrome 54.0+’ (debugging protocol
‘v1.2’) and ‘NodeJS 7+’.

Indium is availabe on MELPA(1), MELPA Stable(2).

* Menu:

* Using MELPA:: 
* Manual installation:: 

   ---------- Footnotes ----------

   (1) https://melpa.org

   (2) https://stable.melpa/org


File: Indium.info,  Node: Using MELPA,  Next: Manual installation,  Up: Installation

1.1.1 Using MELPA
-----------------

Unless you are already using MELPA, you will have to setup ‘package.el’
to use MELPA or MELPA Stable repositories.  You can follow this
documentation(1).

You can install Indium with the following command:

     M-x package-install [RET] indium [RET]

or by adding this bit of Emacs Lisp code to your Emacs initialization
file (‘.emacs’ or ‘init.el’):

     (unless (package-installed-p 'indium)
       (package-install 'indium))

If the installation doesn’t work try refreshing the package list:

     M-x package-refresh-contents [RET]

   ---------- Footnotes ----------

   (1) https://melpa.org/#/getting-started


File: Indium.info,  Node: Manual installation,  Prev: Using MELPA,  Up: Installation

1.1.2 Manual installation
-------------------------

If you want to install Indium manually, make sure to install
‘websocket.el’.  Obtain the code of Indium from the repository(1).

Add the following to your Emacs configuration:

     ;; load Indium from its source code
     (add-to-list 'load-path "~/projects/indium")
     (require 'indium)

   ---------- Footnotes ----------

   (1) https://github.com/NicolasPetton/indium


File: Indium.info,  Node: Getting up and running,  Next: The REPL,  Prev: Installation,  Up: Table of contents

1.2 Getting up and running
==========================

* Menu:

* NodeJS:: 
* Chrome/Chromium:: 
* Using local files when debugging:: 
* Configuring Webpack for the debugger:: 


File: Indium.info,  Node: NodeJS,  Next: Chrome/Chromium,  Up: Getting up and running

1.2.1 NodeJS
------------

Nodejs >= ‘8.x’ is required for Indium to work.

* Menu:

* Installing a recent version of NodeJS:: 
* Executing NodeJS from Emacs:: 
* Connecting to a Nodejs process:: 


File: Indium.info,  Node: Installing a recent version of NodeJS,  Next: Executing NodeJS from Emacs,  Up: NodeJS

1.2.1.1 Installing a recent version of NodeJS
.............................................

If your distribution ships an old version of NodeJS, you can install a
more recent version using nvm(1):

     $ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash

Once ‘nvm’ is install, you can easily install and use the version of
NodeJS you want:

     $ nvm install v8
     $ nvm alias default v8
     $ node --version

If you install NodeJS using ‘nvm’, chances are that Emacs won’t have it
in its ‘exec path’.  A simple solution is to use the excellent
exec-path-from-shell(2) package.

   ---------- Footnotes ----------

   (1) https://github.com/creationix/nvm

   (2) https://github.com/purcell/exec-path-from-shell


File: Indium.info,  Node: Executing NodeJS from Emacs,  Next: Connecting to a Nodejs process,  Prev: Installing a recent version of NodeJS,  Up: NodeJS

1.2.1.2 Executing NodeJS from Emacs
...................................

Indium can start NodeJS processes and connect to them automatically.
This is the preferred way of using Indium with NodeJS.

Start a process with ‘M-x indium-run-node’.  Once the process is ready,
Indium will connect to it and open a REPL buffer.

The output from the NodeJS process is appended to the ‘*nodejs process*’
buffer.

When a nodejs process has been started with ‘indium-run-node’, it can be
restarted with ‘indium-restart-node’.

     Note: Indium will append the ‘--inspect’ flag to the command-line
     arguments automatically, so you do not need to provide them.

If you wish to break the execution at the first statement, set
‘indium-nodejs-inspect-brk’ to ‘t’.


File: Indium.info,  Node: Connecting to a Nodejs process,  Prev: Executing NodeJS from Emacs,  Up: NodeJS

1.2.1.3 Connecting to a Nodejs process
......................................

To connect to an existing NodeJS process, make sure that process was
started with the ‘--inspect’ flag:

     node --inspect myfile.js

If you wish to break on the first line of the application code, start
node using:

     node --inspect --debug-brk myfile.js

Node will tell you to open an URL in Chrome:

     chrome-devtools://inspector.html?...&ws=127.0.0.1:PORT/PATH

Evaluate ‘M-x indium-connect-to-nodejs RET 127.0.0.1 RET PORT RET PATH’,
‘PORT’ and ‘PATH’ are the ones from the ‘ws’ parameter of the above URL
or using ‘M-x indium-nodejs-connect-to-url RET 127.0.0.1:PORT/PATH’ (in
this case, if the ‘Port’ is not specified, it will default to ‘9229’.

Connecting Indium to the node process will open a debugger on the first
line of the application code if you passed the CLI argument
‘--debug-brk’.


File: Indium.info,  Node: Chrome/Chromium,  Next: Using local files when debugging,  Prev: NodeJS,  Up: Getting up and running

1.2.2 Chrome/Chromium
---------------------

Chrome/Chromium >= ‘60.0’ is required for Indium to properly work
(debugging protocol ‘v1.2’).

Start Chrome/Chromium with the ‘--remote-debugging-port’ flag like the
following:

     chromium --remote-debugging-port=9222 https://localhost:3000

Make sure that no instance of Chrome is already running, otherwise
Chrome will simply open a new tab on the existing Chrome instance, and
the ‘remote-debugging-port’ will not be set.

To connect to a tab, run from Emacs:

     M-x indium-connect-to-chrome


File: Indium.info,  Node: Using local files when debugging,  Next: Configuring Webpack for the debugger,  Prev: Chrome/Chromium,  Up: Getting up and running

1.2.3 Using local files when debugging
--------------------------------------

Indium can use local files when debugging, or to set breakpoints.

     Hint: When using ‘NodeJS’, or when the connected tab uses the
     ‘file://’ URL, Indium will by itself use local files from disk.  In
     this case there is nothing to setup.

If the Chrome connection uses the ‘http://’ or ‘https://’ protocol, you
will have to tell Indium where to find the corresponding JavaScript
files on disk by setting up a workspace.

To do that, place an empty ‘.indium’ marker file in the root folder
where your `web server serves static files'.

The root folder where the ‘.indium’ file should be put is not always the
directory that contains your JavaScript files.  It should be the root
folder containing static files.  Most of the time, it is at least one
level above.

Given the following project structure:

     project/ (current directory)
        www/
           index.html
           css/
              style.css
           js/
              app.js
           .indium

Indium will lookup the file ‘www/js/app.js’ for the URL
“‘http://localhost:3000/js/app.js’”.

     Warning: In order for this setup to work, make sure to call
     ‘indium-connect-to-chrome’ from somewhere within the workspace
     directory!


File: Indium.info,  Node: Configuring Webpack for the debugger,  Prev: Using local files when debugging,  Up: Getting up and running

1.2.4 Configuring Webpack for the debugger
------------------------------------------

When Webpack is used to bundle JavaScript files, it is currently
required to configure it to emit absolute file paths for sourcemaps, see
*note Blackboxing scripts: 14.


File: Indium.info,  Node: The REPL,  Next: Interaction in JS buffers,  Prev: Getting up and running,  Up: Table of contents

1.3 The REPL
============

* Menu:

* Starting a REPL:: 
* Using the REPL:: 
* Code evaluation & context:: 


File: Indium.info,  Node: Starting a REPL,  Next: Using the REPL,  Up: The REPL

1.3.1 Starting a REPL
---------------------

A REPL (Read Eval Print Loop) buffer is automatically open when a new
Indium connection is made (see *note Getting up and running: 9.).

 [image src="repl.png" ]

The REPL offers the following features:

   * Auto completion with ‘company-mode’

   * JS syntax highlighting

   * Pretty printing and preview of printed values

   * Access to the object inspector (see *note The inspector: 19.)

 [image src="repl2.png" ]


File: Indium.info,  Node: Using the REPL,  Next: Code evaluation & context,  Prev: Starting a REPL,  Up: The REPL

1.3.2 Using the REPL
--------------------

* Menu:

* Keybindings:: 
* Reconnecting from the REPL buffer:: 


File: Indium.info,  Node: Keybindings,  Next: Reconnecting from the REPL buffer,  Up: Using the REPL

1.3.2.1 Keybindings
...................

Here is the list of available keybindings in a REPL buffer:

Keybinding        Description
                  
---------------------------------------------------------------------------------------------------------------
                  
‘RET’             Evalute the current input.  When the point is on a printed object, inspect the object.
                  
                  
‘C-RET’           Insert a newline.
                  
                  
‘C-c M-i’         Evalute the current input and open an inspector on the result.
                  
                  
‘C-c C-o’         Clear the output.
                  
                  
‘C-c C-q’         Kill the REPL buffer and close the current connection.
                  
                  
‘M-n’             Insert the previous input in the history.
                  
                  
‘M-p’             Instert the next input in the history.
                  


File: Indium.info,  Node: Reconnecting from the REPL buffer,  Prev: Keybindings,  Up: Using the REPL

1.3.2.2 Reconnecting from the REPL buffer
.........................................

When a connection is closed (most probably because other devtools were
open on the same runtime), the REPL will display two buttons, one to try
to reopen the connection, and another one to kill Emacs buffers using
this connection (the REPL buffer, inspectors & debuggers).


File: Indium.info,  Node: Code evaluation & context,  Prev: Using the REPL,  Up: The REPL

1.3.3 Code evaluation & context
-------------------------------

When evaluating code in the REPL, Indium will always run the code on the
current execution context.

This means that while debugging, code execution will happen in the
context of the current stack frame, and will be able to access local
variables from the stack, etc.


File: Indium.info,  Node: Interaction in JS buffers,  Next: The stepping debugger,  Prev: The REPL,  Up: Table of contents

1.4 Interaction in JS buffers
=============================

Indium comes with a minor mode called ‘indium-interaction-mode’ for
interactive programming.  To enable it in all JavaScript buffers, add
something like the following to your Emacs configuration:

     (require 'indium)
     (add-hook 'js-mode-hook #'indium-interaction-mode)

When ‘indium-interaction-mode’ is on, you can evaluate code, inspect
objects and add or remove breakpoints from your buffers.

* Menu:

* Evaluating and inspecting:: 
* Switching to the REPL buffer:: 
* Adding and removing breakpoints:: 
* Live code update (hot-swapping JavaScript sources): Live code update hot-swapping JavaScript sources. 


File: Indium.info,  Node: Evaluating and inspecting,  Next: Switching to the REPL buffer,  Up: Interaction in JS buffers

1.4.1 Evaluating and inspecting
-------------------------------

Here’s a list of available keybindings:

   - ‘C-x C-e’: Evaluate the JavaScript expression preceding the point.

   - ‘C-M-x’: Evaluate the innermost function enclosing the point.

   - ‘C-c M-i’: Inspect the result of the evaluation of an expression
     (see *note The inspector: 19.).

   - ‘C-c M-:’: Prompt for an expression to evaluate and inspect.

   - ‘M-x indium-eval-buffer’: Evaluate the entire buffer.

   - ‘M-x indium-eval-region’: Evaluate the current region.


File: Indium.info,  Node: Switching to the REPL buffer,  Next: Adding and removing breakpoints,  Prev: Evaluating and inspecting,  Up: Interaction in JS buffers

1.4.2 Switching to the REPL buffer
----------------------------------

Press ‘C-c C-z’ from any buffer with ‘indium-interaction-mode’ turned on
to switch back to the REPL buffer (see *note The REPL: 16.).


File: Indium.info,  Node: Adding and removing breakpoints,  Next: Live code update hot-swapping JavaScript sources,  Prev: Switching to the REPL buffer,  Up: Interaction in JS buffers

1.4.3 Adding and removing breakpoints
-------------------------------------

You need to first make sure that Indium is set up correctly to use local
files (see *note Using local files when debugging: 11.).

   - ‘C-c b b’: Add a breakpoint

   - ‘C-c b c’: Add a conditional breakpoint

   - ‘C-c b k’: Remove a breakpoint

   - ‘C-c b t’: Toggle a breakpoint

   - ‘C-c b K’: Remove all breakpoints from the current buffer

   - ‘C-c b e’: Edit condition of a breakpoint

   - ‘C-c b l’: List all breakpoints and easily jump to any breakpoint

   - ‘C-c b d’: Deactivate all breakpoints (the runtime won’t pause when
     hitting a breakpoint)

   - ‘C-c b a’: Activate all breakpoints (it has no effect if
     breakpoints have not been deactivated)

The left fringe or margin can also be clicked to add or remove
breakpoints.

Once a breakpoint is set, execution will stop when a breakpoint is hit,
and the Indium debugger pops up (see *note The stepping debugger: 24.).

Since Indium 0.7, breakpoints are supported in source files with an
associated sourcemap, see *note Using sourcemaps: 25.

     Note: Breakpoints are persistent: if the connection is closed, when
     a new connection is made Indium will attempt to add back all
     breakpoints.


File: Indium.info,  Node: Live code update hot-swapping JavaScript sources,  Prev: Adding and removing breakpoints,  Up: Interaction in JS buffers

1.4.4 Live code update (hot-swapping JavaScript sources)
--------------------------------------------------------

Indium supports live code updates without the need to reload the browser
tab or restart the nodejs process.

This feature works with by hot-swapping the script source, and works
even with lexical closures.

     Note: This feature currently in only available for Chrome &
     Chromium.

To enable live updates, make sure Indium is set up to use local files
(see *note Using local files when debugging: 11.).

   - ‘C-c C-k’: Updates the runtime JavaScript source with the contents
     of the current buffer (this is also done automatically when a
     buffer is saved).

You can setup a hook to be run after each script update.  For example

     (add-hook 'indium-update-script-source-hook
             (lambda (url)
               (indium-eval (format "window.dispatchEvent(new CustomEvent('patch', {detail: {url: '%s'}}))"
                                    url))))

Then you can use it in your app for development purposes

     window.addEventListener("patch", (event) => {
       console.log("Patched @ " + new Date().toTimeString().substring(0, 8), event.detail.url);
       // rerender, etc
     });


File: Indium.info,  Node: The stepping debugger,  Next: The inspector,  Prev: Interaction in JS buffers,  Up: Table of contents

1.5 The stepping debugger
=========================

* Menu:

* Using sourcemaps:: 
* Blackboxing scripts:: 
* Sourcemaps and Webpack:: 


File: Indium.info,  Node: Using sourcemaps,  Next: Blackboxing scripts,  Up: The stepping debugger

1.5.1 Using sourcemaps
----------------------

Since version 0.7, Indium uses sourcemap files by default.

For sourcemaps to work properly with Chrome/Chromium, make sure that a
workspace is correctly set (see *note Using local files when debugging:
11.).

If you wish to disable sourcemaps when debugging, set
‘indium-script-enable-sourcemaps’ to ‘nil’.


File: Indium.info,  Node: Blackboxing scripts,  Next: Sourcemaps and Webpack,  Prev: Using sourcemaps,  Up: The stepping debugger

1.5.2 Blackboxing scripts
-------------------------

The custom variable ‘indium-debugger-blackbox-regexps’ holds a list of
regular expression of script paths to blackbox when debugging.

Blackboxed scripts are skipped when stepping in the debugger.


File: Indium.info,  Node: Sourcemaps and Webpack,  Prev: Blackboxing scripts,  Up: The stepping debugger

1.5.3 Sourcemaps and Webpack
----------------------------

When using Webpack to bundle JavaScript files, Indium will only be able
to use sourcemaps if Webpack is configured to emit absolute file paths.

Here is an example configuration snippet to be inserted in
‘webpack.config.json’

     ...
     output : {
       ...
       devtoolModuleFilenameTemplate: '[absolute-resource-path]',
       devtoolFallbackModuleFilenameTemplate: '[absolute-resource-path]?[hash]'
     }


File: Indium.info,  Node: The inspector,  Next: Network,  Prev: The stepping debugger,  Up: Table of contents

1.6 The inspector
=================

Indium features an object inspector that can be open on any object
reference from a REPL buffer (see *note The REPL: 16.), the debugger
(see *note The stepping debugger: 24.), or the result of any evaluation
of JavaScript code (see *note Interaction in JS buffers: 20.).

To inspect the result of the evaluation of an expression, press ‘C-c
M-i’.  An inspector buffer will pop up.  You can also press ‘RET’ or
left click on object links from the REPL buffer.

 [image src="inspector.png" ]

* Menu:

* Using the inspector:: 


File: Indium.info,  Node: Using the inspector,  Up: The inspector

1.6.1 Using the inspector
-------------------------

Here is a list of available keybindings in an inspector buffer:

Keybinding               Description
                         
---------------------------------------------------------------------------------------------------------------
                         
‘RET’                    Follow a link to inspect the object at point
                         
                         
‘l’                      Pop to the previous inspected object
                         
                         
‘g’                      Update the inspector buffer
                         
                         
‘n’ or ‘TAB’             Jump to the next object in the inspector
                         
                         
‘p’ or ‘s-TAB’           Jump to the previous object in the inspector
                         


File: Indium.info,  Node: Network,  Next: Listing parsed scripts,  Prev: The inspector,  Up: Table of contents

1.7 Network
===========

You can disable or enable network cache using the following commands:

     M-x indium-v8-disable-cache
     M-x indium-v8-enable-cache

Both commands save your choice which will be used for future Indium
connections for the current Emacs session.

You can make the cache setting permament by setting
‘indium-v8-cache-disabled’:

     (setq indium-v8-cache-disabled t)


File: Indium.info,  Node: Listing parsed scripts,  Prev: Network,  Up: Table of contents

1.8 Listing parsed scripts
==========================

Indium includes the command ‘indium-list-scripts’ to list all JavaScript
scripts parsed by the runtime.  When using a workspace, local file can
be visited from entries in the list (see *note Using local files when
debugging: 11.).

* Menu:

* Using the listing buffer:: 


File: Indium.info,  Node: Using the listing buffer,  Up: Listing parsed scripts

1.8.1 Using the listing buffer
------------------------------

Here is a list of available keybindings in an script listing buffer:

Keybinding               Description
                         
---------------------------------------------------------------------------------------------------------------
                         
‘RET’                    Follow a link open the local file associated with the script
                         
                         
‘g’                      Update the listing buffer
                         
                         
‘n’ or ‘TAB’             Jump to the next script
                         
                         
‘p’ or ‘s-TAB’           Jump to the previous script
                         


File: Indium.info,  Node: Indices and tables,  Prev: Table of contents,  Up: Top

2 Indices and tables
********************

   * genindex

   * modindex

   * search



Tag Table:
Node: Top334
Ref: index doc542
Ref: 0542
Ref: Top-Footnote-12545
Ref: Top-Footnote-22583
Node: Table of contents2631
Ref: index table-of-contents2727
Ref: 12727
Ref: index indium2727
Ref: 22727
Node: Installation2956
Ref: installation doc3053
Ref: 33053
Ref: installation installation3053
Ref: 43053
Ref: Installation-Footnote-13445
Ref: Installation-Footnote-23471
Node: Using MELPA3504
Ref: installation using-melpa3592
Ref: 53592
Ref: Using MELPA-Footnote-14218
Node: Manual installation4262
Ref: installation manual-installation4350
Ref: 64350
Ref: Manual installation-Footnote-14735
Node: Getting up and running4783
Ref: setup doc4897
Ref: 74897
Ref: setup getting-up-and-running4897
Ref: 84897
Ref: setup up-and-running4897
Ref: 94897
Node: NodeJS5075
Ref: setup id15164
Ref: a5164
Ref: setup nodejs5164
Ref: b5164
Node: Installing a recent version of NodeJS5366
Ref: setup installing-a-recent-version-of-nodejs5482
Ref: c5482
Ref: Installing a recent version of NodeJS-Footnote-16152
Ref: Installing a recent version of NodeJS-Footnote-26194
Node: Executing NodeJS from Emacs6250
Ref: setup executing-nodejs-from-emacs6405
Ref: d6405
Node: Connecting to a Nodejs process7186
Ref: setup connecting-to-a-nodejs-process7295
Ref: e7295
Node: Chrome/Chromium8220
Ref: setup chrome-chromium8350
Ref: f8350
Ref: setup chrome8350
Ref: 108350
Node: Using local files when debugging8914
Ref: setup local-files9074
Ref: 119074
Ref: setup using-local-files-when-debugging9074
Ref: 129074
Node: Configuring Webpack for the debugger10415
Ref: setup configuring-webpack-for-the-debugger10551
Ref: 1310551
Node: The REPL10808
Ref: repl doc10935
Ref: 1510935
Ref: repl repl10935
Ref: 1610935
Ref: repl the-repl10935
Ref: 1710935
Node: Starting a REPL11044
Ref: repl starting-a-repl11127
Ref: 1811127
Node: Using the REPL11602
Ref: repl using-the-repl11719
Ref: 1a11719
Node: Keybindings11828
Ref: repl keybindings11932
Ref: 1b11932
Node: Reconnecting from the REPL buffer12938
Ref: repl reconnecting-from-the-repl-buffer13042
Ref: 1c13042
Node: Code evaluation & context13401
Ref: repl code-evaluation-context13494
Ref: 1d13494
Node: Interaction in JS buffers13828
Ref: code-evaluation doc13954
Ref: 1e13954
Ref: code-evaluation interaction-in-js-buffers13954
Ref: 1f13954
Ref: code-evaluation interaction13954
Ref: 2013954
Node: Evaluating and inspecting14644
Ref: code-evaluation evaluating-and-inspecting14768
Ref: 2114768
Node: Switching to the REPL buffer15337
Ref: code-evaluation switching-to-the-repl-buffer15501
Ref: 2215501
Node: Adding and removing breakpoints15715
Ref: code-evaluation adding-and-removing-breakpoints15902
Ref: 2315902
Node: Live code update hot-swapping JavaScript sources17197
Ref: code-evaluation live-code-update-hot-swapping-javascript-sources17347
Ref: 2617347
Node: The stepping debugger18578
Ref: debugger doc18709
Ref: 2718709
Ref: debugger debugger18709
Ref: 2418709
Ref: debugger the-stepping-debugger18709
Ref: 2818709
Node: Using sourcemaps18847
Ref: debugger using-sourcemaps18949
Ref: 2918949
Ref: debugger sourcemaps18949
Ref: 2518949
Node: Blackboxing scripts19313
Ref: debugger blackboxing-scripts19446
Ref: 2a19446
Ref: debugger webpack19446
Ref: 1419446
Node: Sourcemaps and Webpack19701
Ref: debugger sourcemaps-and-webpack19809
Ref: 2b19809
Node: The inspector20289
Ref: inspector doc20402
Ref: 2c20402
Ref: inspector inspector20402
Ref: 1920402
Ref: inspector the-inspector20402
Ref: 2d20402
Node: Using the inspector20975
Ref: inspector using-the-inspector21044
Ref: 2e21044
Node: Network21947
Ref: network doc22061
Ref: 2f22061
Ref: network network22061
Ref: 3022061
Ref: network id122061
Ref: 3122061
Node: Listing parsed scripts22460
Ref: listing-scripts doc22552
Ref: 3222552
Ref: listing-scripts listing-scripts22552
Ref: 3322552
Ref: listing-scripts listing-parsed-scripts22552
Ref: 3422552
Node: Using the listing buffer22883
Ref: listing-scripts using-the-listing-buffer22966
Ref: 3522966
Node: Indices and tables23746
Ref: index indices-and-tables23830
Ref: 3623830

End Tag Table


Local Variables:
coding: utf-8
End:
