;;; mix-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from mix.el

(autoload 'mix-compile "mix" "\
Run the mix compile command.
If PREFIX is non-nil, prompt for additional params.  See `mix--prompt`
IF USE-UMBRELLA-SUBPROJECTS is t, prompt for umbrells subproject.

(fn &optional PREFIX USE-UMBRELLA-SUBPROJECTS)" t)
(autoload 'mix-test "mix" "\
Run the mix test command.
If PREFIX is non-nil, prompt for additional params.  See `mix--prompt`
IF USE-UMBRELLA-SUBPROJECTS is t, prompt for umbrells subproject.

(fn &optional PREFIX USE-UMBRELLA-SUBPROJECTS)" t)
(autoload 'mix-test-current-buffer "mix" "\
Run the mix test for the current buffer.
If PREFIX is non-nil, prompt for additional params.  See `mix--prompt`.
IF USE-UMBRELLA-SUBPROJECTS is t, excutes a test from a subproject
where a file is located, otherwise starts from the umbrella root.

(fn &optional PREFIX USE-UMBRELLA-SUBPROJECTS)" t)
(autoload 'mix-test-current-test "mix" "\
Run the mix test for the curret test.
If PREFIX is non-nil, prompt for additional params.  See `mix--prompt`.
IF USE-UMBRELLA-SUBPROJECTS is t, excutes a test from a subproject
where a test is located, otherwise starts from the umbrella root.

(fn &optional PREFIX USE-UMBRELLA-SUBPROJECTS)" t)
(autoload 'mix-execute-task "mix" "\
Select and run mix task.
If PREFIX is non-nil, prompt for additional params.  See `mix--prompt`
IF USE-UMBRELLA-SUBPROJECTS is t, prompt for umbrells subproject to start a mix task from.

(fn &optional PREFIX USE-UMBRELLA-SUBPROJECTS)" t)
(autoload 'mix-last-command "mix" "\
Execute the last mix task." t)
(autoload 'mix-minor-mode "mix" "\
Mix minor mode. Used to hold keybindings for mix-mode.

\\{mix-minor-mode-map}

This is a minor mode.  If called interactively, toggle the `mix
minor mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `mix-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "mix" '("mix-"))

;;; End of scraped data

(provide 'mix-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; mix-autoloads.el ends here
