This is Indium.info, produced by makeinfo version 6.5 from Indium.texi.

     Indium 1.2.0, Aug 15, 2018

     Nicolas Petton

     Copyright © 2018, Nicolas Petton

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Indium: (Indium.info). JavaScript development environment for Emacs.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.6.6.


File: Indium.info,  Node: Top,  Next: Table of contents,  Up: (dir)

Indium Documentation
********************

     Indium 1.2.0, Aug 15, 2018

     Nicolas Petton

     Copyright © 2018, Nicolas Petton

Indium is a JavaScript development environment for Emacs(1).

Indium is Free Software, licensed under the GPL v3.0.  You can follow
its development on GitHub(2).

Indium connects to a browser tab or nodejs process and provides several
features for JavaScript development, including:

   * a REPL (with auto completion) & object inspection;

   * an inspector, with history and navigation;

   * a scratch buffer (‘M-x indium-scratch’);

   * JavaScript evaluation in JS buffers with ‘indium-interaction-mode’;

   * a stepping Debugger, similar to ‘edebug’, or ‘cider’.

This documentation can be read online at ‘https://indium.readthedocs.io’
and in Info format (within Emacs with ‘(info "Indium")’).

It is also available in Info format and can be consulted from within
Emacs with ‘C-h i m indium RET’.

* Menu:

* Table of contents::
* Indices and tables::

 — The Detailed Node Listing —

Table of contents

* Installation::
* Getting up and running::
* The REPL::
* Interaction in JS buffers::
* The stepping debugger::
* The inspector::
* Troublehooting::

Installation

* The Indium server::
* Using MELPA::
* Manual installation::

Getting up and running

* Project configuration::
* General configuration::
* Chrome/Chromium configuration options::
* NodeJS configuration options::
* Starting Indium::
* NodeJS requirements::
* Chrome/Chromium requirements::

The REPL

* Starting a REPL::
* Using the REPL::
* Code evaluation & context::

Using the REPL

* Keybindings::
* Reconnecting from the REPL buffer::

Interaction in JS buffers

* Evaluating and inspecting::
* Switching to the REPL buffer::
* Adding and removing breakpoints::

The stepping debugger

* Using sourcemaps::
* Blackboxing scripts::

Using sourcemaps

* Overriding sourcemap paths::

The inspector

* Using the inspector::

Troublehooting

* General advices before reporting issues::
* Breakpoints are not set (not using sourcemaps): Breakpoints are not set not using sourcemaps.
* Breakpoints and debugging do not work (using sourcemaps): Breakpoints and debugging do not work using sourcemaps.


   ---------- Footnotes ----------

   (1) http://gnu.org/software/emacs

   (2) https://github.com/NicolasPetton/indium


File: Indium.info,  Node: Table of contents,  Next: Indices and tables,  Prev: Top,  Up: Top

1 Table of contents
*******************

* Menu:

* Installation::
* Getting up and running::
* The REPL::
* Interaction in JS buffers::
* The stepping debugger::
* The inspector::
* Troublehooting::


File: Indium.info,  Node: Installation,  Next: Getting up and running,  Up: Table of contents

1.1 Installation
================

     Note: If you already have installed ‘Jade’, you should read the
     migration-from-jade page first.

Indium supports ‘Emacs 25.3+’, works with ‘Chrome’ (debugging protocol
‘v1.2’, see *note Chrome/Chromium requirements: 5.) and ‘NodeJS’, see
*note NodeJS requirements: 6.

Indium is availabe on MELPA(1), MELPA Stable(2).

* Menu:

* The Indium server::
* Using MELPA::
* Manual installation::

   ---------- Footnotes ----------

   (1) https://melpa.org

   (2) https://stable.melpa/org


File: Indium.info,  Node: The Indium server,  Next: Using MELPA,  Up: Installation

1.1.1 The Indium server
-----------------------

Indium needs to communicate with a small server for evaluation and
debugging.  Install the server with the following command (prepend
‘sudo’ on GNU/Linux):

     npm install -g indium


File: Indium.info,  Node: Using MELPA,  Next: Manual installation,  Prev: The Indium server,  Up: Installation

1.1.2 Using MELPA
-----------------

Unless you are already using MELPA, you will have to setup ‘package.el’
to use MELPA or MELPA Stable repositories.  You can follow this
documentation(1).

You can install Indium with the following command:

     M-x package-install [RET] indium [RET]

or by adding this bit of Emacs Lisp code to your Emacs initialization
file (‘.emacs’ or ‘init.el’):

     (unless (package-installed-p 'indium)
       (package-install 'indium))

If the installation doesn’t work try refreshing the package list:

     M-x package-refresh-contents [RET]

   ---------- Footnotes ----------

   (1) https://melpa.org/#/getting-started


File: Indium.info,  Node: Manual installation,  Prev: Using MELPA,  Up: Installation

1.1.3 Manual installation
-------------------------

If you want to install Indium manually, make sure to install
‘websocket.el’.  Obtain the code of Indium from the repository(1).

Add the following to your Emacs configuration:

     ;; load Indium from its source code
     (add-to-list 'load-path "~/projects/indium")
     (require 'indium)

   ---------- Footnotes ----------

   (1) https://github.com/NicolasPetton/indium


File: Indium.info,  Node: Getting up and running,  Next: The REPL,  Prev: Installation,  Up: Table of contents

1.2 Getting up and running
==========================

* Menu:

* Project configuration::
* General configuration::
* Chrome/Chromium configuration options::
* NodeJS configuration options::
* Starting Indium::
* NodeJS requirements::
* Chrome/Chromium requirements::


File: Indium.info,  Node: Project configuration,  Next: General configuration,  Up: Getting up and running

1.2.1 Project configuration
---------------------------

Place a ‘.indium.json’ file in the root folder of your JavaScript
project.  The project file can contain one or many configurations
settings for NodeJS (see *note NodeJS configuration options: f.) and
Chrome/Chromium (see *note Chrome/Chromium configuration options: 10.).

Here is a minimalist ‘.indium.json’ file.:

     {
       "configurations": [
         {
           "name": "Web project",
           "type": "chrome"
         }
       ]
     }


File: Indium.info,  Node: General configuration,  Next: Chrome/Chromium configuration options,  Prev: Project configuration,  Up: Getting up and running

1.2.2 General configuration
---------------------------

The ‘.indium.json’ file can contain as many configurations as needed,
and mix any supported configuration types.

The currently supported ‘type’ values are ‘"chrome"’ and ‘"node"’.

The root directory of the source files is by default set to the
directory where this ‘.indium.json’ file is placed, but it can be
overridden with the ‘root’ (or the ‘webRoot’ alias) option:

     {
       "configurations": [
         {
           "type": "chrome",
           "root": "src"
         }
       ]
     }

Custom sourcemap path overrides can be set with
‘sourceMapPathOverrides’, see *note Using sourcemaps: 13. for mode
information on sourcemaps and debugging.


File: Indium.info,  Node: Chrome/Chromium configuration options,  Next: NodeJS configuration options,  Prev: General configuration,  Up: Getting up and running

1.2.3 Chrome/Chromium configuration options
-------------------------------------------


host: Host on which Chrome is running (defaults to ‘"localhost"’).


port: Port on which Chrome is running (defaults to ‘9222’).


url: Url to open when running ‘indium-launch’.

Example configuration:

     {
       "configurations": [
         {
           "name": "Web project",
           "type": "chrome",
           "host": 192.168.22.1,
           "url": "http://192.168.22.1/myproject/index.html",
           "port": 9222
         }
       ]
     }


File: Indium.info,  Node: NodeJS configuration options,  Next: Starting Indium,  Prev: Chrome/Chromium configuration options,  Up: Getting up and running

1.2.4 NodeJS configuration options
----------------------------------


command: Nodejs command to start a new process.  The ‘--inspect’ flag
will be added automatically.


inspect-brk: Whether Indium should break at the first statement (true by
default).


host: Host on which the Node inspector is listening (defaults to
‘"localhost"’).


port: Port on which the Node inspector is listening (defaults to 9229).

Here is an example configuration for debugging Gulp tasks:

     {
       "configurations": [
         {
           "name": "Gulp",
           "type": "node",
           "command": "node ./node_modules/gulp/bin/gulp.js",
           "inspect-brk": true
         }
       ]
     }


File: Indium.info,  Node: Starting Indium,  Next: NodeJS requirements,  Prev: NodeJS configuration options,  Up: Getting up and running

1.2.5 Starting Indium
---------------------

Indium can be started in two modes:

   - Connect: ‘M-x indium-connect’ Connect indium to a running runtime
     from one of the configurations in the ‘.indium.json’ project file.

   - Launch: ‘M-x indium-launch’ Start a JavaScript process (Chrome or
     NodeJS) as specified from the configurations in the ‘.indium.json’
     project file.


File: Indium.info,  Node: NodeJS requirements,  Next: Chrome/Chromium requirements,  Prev: Starting Indium,  Up: Getting up and running

1.2.6 NodeJS requirements
-------------------------

Nodejs >= ‘8.x’ is required for Indium to work.

If your distribution ships an old version of NodeJS, you can install a
more recent version using nvm(1):

     $ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash

Once ‘nvm’ is install, you can easily install and use the version of
NodeJS you want:

     $ nvm install v8
     $ nvm alias default v8
     $ node --version

If you install NodeJS using ‘nvm’, chances are that Emacs won’t have it
in its ‘exec path’.  A simple solution is to use the excellent
exec-path-from-shell(2) package.

   ---------- Footnotes ----------

   (1) https://github.com/creationix/nvm

   (2) https://github.com/purcell/exec-path-from-shell


File: Indium.info,  Node: Chrome/Chromium requirements,  Prev: NodeJS requirements,  Up: Getting up and running

1.2.7 Chrome/Chromium requirements
----------------------------------

Chrome/Chromium >= ‘60.0’ is required for Indium to properly work
(debugging protocol ‘v1.2’).

Start Chrome/Chromium with the ‘--remote-debugging-port’ flag like the
following:

     chromium --remote-debugging-port=9222 https://localhost:3000

Make sure that no instance of Chrome is already running, otherwise
Chrome will simply open a new tab on the existing Chrome instance, and
the ‘remote-debugging-port’ will not be set.


File: Indium.info,  Node: The REPL,  Next: Interaction in JS buffers,  Prev: Getting up and running,  Up: Table of contents

1.3 The REPL
============

* Menu:

* Starting a REPL::
* Using the REPL::
* Code evaluation & context::


File: Indium.info,  Node: Starting a REPL,  Next: Using the REPL,  Up: The REPL

1.3.1 Starting a REPL
---------------------

A REPL (Read Eval Print Loop) buffer is automatically open when a new
Indium connection is made (see *note Getting up and running: b.).

 [image src="repl.png" ]

The REPL offers the following features:

   * Auto completion with ‘company-mode’

   * JS syntax highlighting

   * Pretty printing and preview of printed values

   * Access to the object inspector (see *note The inspector: 1e.)

 [image src="repl2.png" ]


File: Indium.info,  Node: Using the REPL,  Next: Code evaluation & context,  Prev: Starting a REPL,  Up: The REPL

1.3.2 Using the REPL
--------------------

* Menu:

* Keybindings::
* Reconnecting from the REPL buffer::


File: Indium.info,  Node: Keybindings,  Next: Reconnecting from the REPL buffer,  Up: Using the REPL

1.3.2.1 Keybindings
...................

Here is the list of available keybindings in a REPL buffer:

Keybinding        Description
                  
---------------------------------------------------------------------------------------------------------------
                  
‘RET’             Evalute the current input.  When the point is on a printed object, inspect the object.
                  
                  
‘C-RET’           Insert a newline.
                  
                  
‘C-c M-i’         Evalute the current input and open an inspector on the result.
                  
                  
‘C-c C-o’         Clear the output.
                  
                  
‘C-c C-q’         Kill the REPL buffer and close the current connection.
                  
                  
‘M-n’             Insert the previous input in the history.
                  
                  
‘M-p’             Instert the next input in the history.
                  


File: Indium.info,  Node: Reconnecting from the REPL buffer,  Prev: Keybindings,  Up: Using the REPL

1.3.2.2 Reconnecting from the REPL buffer
.........................................

When a connection is closed (most probably because other devtools were
open on the same runtime), the REPL will display two buttons, one to try
to reopen the connection, and another one to kill Emacs buffers using
this connection (the REPL buffer, inspectors & debuggers).


File: Indium.info,  Node: Code evaluation & context,  Prev: Using the REPL,  Up: The REPL

1.3.3 Code evaluation & context
-------------------------------

When evaluating code in the REPL, Indium will always run the code on the
current execution context.

This means that while debugging, code execution will happen in the
context of the current stack frame, and will be able to access local
variables from the stack, etc.


File: Indium.info,  Node: Interaction in JS buffers,  Next: The stepping debugger,  Prev: The REPL,  Up: Table of contents

1.4 Interaction in JS buffers
=============================

Indium comes with a minor mode called ‘indium-interaction-mode’ for
interactive programming.  To enable it in all JavaScript buffers, add
something like the following to your Emacs configuration:

     (require 'indium)
     (add-hook 'js-mode-hook #'indium-interaction-mode)

When ‘indium-interaction-mode’ is on, you can evaluate code, inspect
objects and add or remove breakpoints from your buffers.

* Menu:

* Evaluating and inspecting::
* Switching to the REPL buffer::
* Adding and removing breakpoints::


File: Indium.info,  Node: Evaluating and inspecting,  Next: Switching to the REPL buffer,  Up: Interaction in JS buffers

1.4.1 Evaluating and inspecting
-------------------------------

Here’s a list of available keybindings:

   - ‘C-x C-e’: Evaluate the JavaScript expression preceding the point.

   - ‘C-M-x’: Evaluate the innermost function enclosing the point.

   - ‘C-c M-i’: Inspect the result of the evaluation of an expression
     (see *note The inspector: 1e.).

   - ‘C-c M-:’: Prompt for an expression to evaluate and inspect.

   - ‘M-x indium-eval-buffer’: Evaluate the entire buffer.

   - ‘M-x indium-eval-region’: Evaluate the current region.


File: Indium.info,  Node: Switching to the REPL buffer,  Next: Adding and removing breakpoints,  Prev: Evaluating and inspecting,  Up: Interaction in JS buffers

1.4.2 Switching to the REPL buffer
----------------------------------

Press ‘C-c C-z’ from any buffer with ‘indium-interaction-mode’ turned on
to switch back to the REPL buffer (see *note The REPL: 1b.).


File: Indium.info,  Node: Adding and removing breakpoints,  Prev: Switching to the REPL buffer,  Up: Interaction in JS buffers

1.4.3 Adding and removing breakpoints
-------------------------------------

You need to first make sure that Indium is set up correctly to use local
files (see *note General configuration: 12.).

   - ‘C-c b b’: Add a breakpoint

   - ‘C-c b c’: Add a conditional breakpoint

   - ‘C-c b k’: Remove a breakpoint

   - ‘C-c b t’: Toggle a breakpoint

   - ‘C-c b K’: Remove all breakpoints from the current buffer

   - ‘C-c b e’: Edit condition of a breakpoint

   - ‘C-c b l’: List all breakpoints and easily jump to any breakpoint

   - ‘C-c b d’: Deactivate all breakpoints (the runtime won’t pause when
     hitting a breakpoint)

   - ‘C-c b a’: Activate all breakpoints (it has no effect if
     breakpoints have not been deactivated)

The left fringe or margin can also be clicked to add or remove
breakpoints.

Once a breakpoint is set, execution will stop when a breakpoint is hit,
and the Indium debugger pops up (see *note The stepping debugger: 29.).

Since Indium 0.7, breakpoints are supported in source files with an
associated sourcemap, see *note Using sourcemaps: 13.

     Note: Breakpoints are persistent: if the connection is closed, when
     a new connection is made Indium will attempt to add back all
     breakpoints.


File: Indium.info,  Node: The stepping debugger,  Next: The inspector,  Prev: Interaction in JS buffers,  Up: Table of contents

1.5 The stepping debugger
=========================

* Menu:

* Using sourcemaps::
* Blackboxing scripts::


File: Indium.info,  Node: Using sourcemaps,  Next: Blackboxing scripts,  Up: The stepping debugger

1.5.1 Using sourcemaps
----------------------

Since version 0.7, Indium uses sourcemap files by default.

For sourcemaps to work properly with Chrome/Chromium, make sure that a
workspace is correctly set (see *note Getting up and running: b.).

     Warning: If your project uses sourcemaps, we advise you to use
     ‘js-mode’ with ‘js2-minor-mode’ instead of ‘js2-mode’.  ‘js2-mode’
     can be extremely slow at parsing large files (like compiled
     JavaScript files) that the debugger might open if a stack frame
     source is not source-mapped.  This can happen for instance when
     using Webpack.

* Menu:

* Overriding sourcemap paths::


File: Indium.info,  Node: Overriding sourcemap paths,  Up: Using sourcemaps

1.5.1.1 Overriding sourcemap paths
..................................

Some sourcemaps cannot be used as is and need path rewriting to map to
locations on disks.

Indium provides the configuration option ‘sourceMapPathOverrides’ for
providing custom sourcemap paths.

The default mapping works well for Webpack projects:

     {
       "webpack:///./~/": "${root}/node_modules/",
       "webpack:///./":   "${root}/",
       "webpack:///":     "/",
       "webpack:///src/": "${root}/"
     }

Overriding the ‘sourceMapPathOverrides’ option will erase the default
mapping.

     Tip: If sourcemaps do not seem to work, you can see how Indium
     resolves sourcemap paths using ‘M-x indium-list-sourcemap-sources’.


File: Indium.info,  Node: Blackboxing scripts,  Prev: Using sourcemaps,  Up: The stepping debugger

1.5.2 Blackboxing scripts
-------------------------

The custom variable ‘indium-debugger-blackbox-regexps’ holds a list of
regular expression of script paths to blackbox when debugging.

Blackboxed scripts are skipped when stepping in the debugger.


File: Indium.info,  Node: The inspector,  Next: Troublehooting,  Prev: The stepping debugger,  Up: Table of contents

1.6 The inspector
=================

Indium features an object inspector that can be open on any object
reference from a REPL buffer (see *note The REPL: 1b.), the debugger
(see *note The stepping debugger: 29.), or the result of any evaluation
of JavaScript code (see *note Interaction in JS buffers: 23.).

To inspect the result of the evaluation of an expression, press ‘C-c
M-i’.  An inspector buffer will pop up.  You can also press ‘RET’ or
left click on object links from the REPL buffer.

 [image src="inspector.png" ]

* Menu:

* Using the inspector::


File: Indium.info,  Node: Using the inspector,  Up: The inspector

1.6.1 Using the inspector
-------------------------

Here is a list of available keybindings in an inspector buffer:

Keybinding               Description
                         
---------------------------------------------------------------------------------------------------------------
                         
‘RET’                    Follow a link to inspect the object at point
                         
                         
‘l’                      Pop to the previous inspected object
                         
                         
‘g’                      Update the inspector buffer
                         
                         
‘n’ or ‘TAB’             Jump to the next object in the inspector
                         
                         
‘p’ or ‘s-TAB’           Jump to the previous object in the inspector
                         


File: Indium.info,  Node: Troublehooting,  Prev: The inspector,  Up: Table of contents

1.7 Troublehooting
==================

If you run into issues with Indium, this document might help you.

* Menu:

* General advices before reporting issues::
* Breakpoints are not set (not using sourcemaps): Breakpoints are not set not using sourcemaps.
* Breakpoints and debugging do not work (using sourcemaps): Breakpoints and debugging do not work using sourcemaps.


File: Indium.info,  Node: General advices before reporting issues,  Next: Breakpoints are not set not using sourcemaps,  Up: Troublehooting

1.7.1 General advices before reporting issues
---------------------------------------------

Issues should be reported on the GitHub issue tracker(1).

1.  If you encounter errors, you can enable ‘debug-on-error’ in Emacs
using ‘M-x toggle-debug-on-error’ and report an issue with the
backtrace.

2.  It is also a good idea to turn on Indium’s log mode with ‘M-: (setq
indium-client-debug t)’, and attach to the issue report the contents of
the ‘*indium-debug-log*’ buffer to help resolve the issue.

Attaching the contents of the ‘*indium-process*’ buffer can help as well
in case an error happens in the server process.

   ---------- Footnotes ----------

   (1) https://github.com/nicolaspetton/indium/issues


File: Indium.info,  Node: Breakpoints are not set not using sourcemaps,  Next: Breakpoints and debugging do not work using sourcemaps,  Prev: General advices before reporting issues,  Up: Troublehooting

1.7.2 Breakpoints are not set (not using sourcemaps)
----------------------------------------------------

If breakpoints do not work, chances are that the project is not
configured correctly.

     Note: Indium needs to know how to map script source urls to files
     on disk.  It uses the ‘root’ (alias ‘webRoot’) configuration option
     as the base path, as described in the *note General configuration:
     12. page.

Indium provides a command ‘indium-list-script-sources’ to list all
scripts parsed by the backend, displaying their sources mapped to files
on disk.  Check that the file where you’re trying to add a breakpoint is
listed.


File: Indium.info,  Node: Breakpoints and debugging do not work using sourcemaps,  Prev: Breakpoints are not set not using sourcemaps,  Up: Troublehooting

1.7.3 Breakpoints and debugging do not work (using sourcemaps)
--------------------------------------------------------------

Correctly mapping sourcemaps to file locations can be tedious (see *note
Using sourcemaps: 13.).

Indium provides the command ‘indium-list-sourcemap-sources’ to help
configuring sourcemaps correctly.  This command displays a list of all
sourcemap sources in the runtime as file paths on disk.  Check that your
files are listed there.


File: Indium.info,  Node: Indices and tables,  Prev: Table of contents,  Up: Top

2 Indices and tables
********************

   * genindex

   * modindex

   * search



Tag Table:
Node: Top334
Ref: index doc542
Ref: 0542
Ref: Top-Footnote-12690
Ref: Top-Footnote-22728
Node: Table of contents2776
Ref: index table-of-contents2872
Ref: 12872
Ref: index indium2872
Ref: 22872
Node: Installation3073
Ref: installation installation3170
Ref: 33170
Ref: installation doc3170
Ref: 43170
Ref: Installation-Footnote-13662
Ref: Installation-Footnote-23688
Node: The Indium server3721
Ref: installation the-indium-server3807
Ref: 73807
Node: Using MELPA4045
Ref: installation using-melpa4159
Ref: 84159
Ref: Using MELPA-Footnote-14785
Node: Manual installation4829
Ref: installation manual-installation4917
Ref: 94917
Ref: Manual installation-Footnote-15302
Node: Getting up and running5350
Ref: setup getting-up-and-running5464
Ref: a5464
Ref: setup setup5464
Ref: b5464
Ref: setup doc5464
Ref: c5464
Node: Project configuration5733
Ref: setup project-configuration5843
Ref: d5843
Ref: setup configuration-file5843
Ref: e5843
Node: General configuration6361
Ref: setup id16517
Ref: 116517
Ref: setup general-configuration6517
Ref: 126517
Node: Chrome/Chromium configuration options7263
Ref: setup chrome-configuration7426
Ref: 107426
Ref: setup chrome-chromium-configuration-options7426
Ref: 147426
Node: NodeJS configuration options7986
Ref: setup nodejs-configuration8143
Ref: f8143
Ref: setup nodejs-configuration-options8143
Ref: 158143
Node: Starting Indium8845
Ref: setup starting-indium8984
Ref: 168984
Ref: setup id28984
Ref: 178984
Node: NodeJS requirements9389
Ref: setup nodejs-requirements9528
Ref: 69528
Ref: setup id39528
Ref: 189528
Ref: NodeJS requirements-Footnote-110211
Ref: NodeJS requirements-Footnote-210253
Node: Chrome/Chromium requirements10309
Ref: setup chrome-requirements10424
Ref: 510424
Ref: setup chrome-chromium-requirements10424
Ref: 1910424
Node: The REPL10941
Ref: repl the-repl11068
Ref: 1a11068
Ref: repl repl11068
Ref: 1b11068
Ref: repl doc11068
Ref: 1c11068
Node: Starting a REPL11174
Ref: repl starting-a-repl11257
Ref: 1d11257
Node: Using the REPL11732
Ref: repl using-the-repl11849
Ref: 1f11849
Node: Keybindings11956
Ref: repl keybindings12060
Ref: 2012060
Node: Reconnecting from the REPL buffer13066
Ref: repl reconnecting-from-the-repl-buffer13170
Ref: 2113170
Node: Code evaluation & context13529
Ref: repl code-evaluation-context13622
Ref: 2213622
Node: Interaction in JS buffers13956
Ref: code-evaluation interaction14082
Ref: 2314082
Ref: code-evaluation interaction-in-js-buffers14082
Ref: 2414082
Ref: code-evaluation doc14082
Ref: 2514082
Node: Evaluating and inspecting14664
Ref: code-evaluation evaluating-and-inspecting14788
Ref: 2614788
Node: Switching to the REPL buffer15357
Ref: code-evaluation switching-to-the-repl-buffer15521
Ref: 2715521
Node: Adding and removing breakpoints15735
Ref: code-evaluation adding-and-removing-breakpoints15865
Ref: 2815865
Node: The stepping debugger17149
Ref: debugger debugger17280
Ref: 2917280
Ref: debugger the-stepping-debugger17280
Ref: 2a17280
Ref: debugger doc17280
Ref: 2b17280
Node: Using sourcemaps17388
Ref: debugger sourcemaps17490
Ref: 1317490
Ref: debugger using-sourcemaps17490
Ref: 2c17490
Node: Overriding sourcemap paths18157
Ref: debugger overriding-sourcemap-paths18236
Ref: 2d18236
Ref: debugger webpack18236
Ref: 2e18236
Node: Blackboxing scripts18964
Ref: debugger blackboxing-scripts19066
Ref: 2f19066
Node: The inspector19321
Ref: inspector inspector19441
Ref: 1e19441
Ref: inspector the-inspector19441
Ref: 3019441
Ref: inspector doc19441
Ref: 3119441
Node: Using the inspector20013
Ref: inspector using-the-inspector20082
Ref: 3220082
Node: Troublehooting20985
Ref: troubleshooting troublehooting21075
Ref: 3321075
Ref: troubleshooting doc21075
Ref: 3421075
Node: General advices before reporting issues21447
Ref: troubleshooting general-advices-before-reporting-issues21590
Ref: 3521590
Ref: General advices before reporting issues-Footnote-122271
Node: Breakpoints are not set not using sourcemaps22326
Ref: troubleshooting breakpoints-are-not-set-not-using-sourcemaps22532
Ref: 3622532
Node: Breakpoints and debugging do not work using sourcemaps23193
Ref: troubleshooting breakpoints-and-debugging-do-not-work-using-sourcemaps23351
Ref: 3723351
Node: Indices and tables23817
Ref: index indices-and-tables23901
Ref: 3823901

End Tag Table


Local Variables:
coding: utf-8
End:
